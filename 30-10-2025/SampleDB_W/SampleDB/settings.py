"""
Django settings for SampleDB project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
import sys

# Override parent process CUDA blocking
if 'NVIDIA_DISABLE' in os.environ:
    del os.environ['NVIDIA_DISABLE']
os.environ['CUDA_VISIBLE_DEVICES'] = '0'
os.environ['CUDA_DEVICE_ORDER'] = 'PCI_BUS_ID'
os.environ['LIVEKIT_DISABLE_GPU'] = '1'
os.environ['OPENCV_DISABLE_CUDA'] = '1'

print(f"✅ GPU enabled: CUDA_VISIBLE_DEVICES={os.environ.get('CUDA_VISIBLE_DEVICES')}", file=sys.stderr)

# Rest of your settings.py continues here...

import os
import sys

CUDA_BLOCK_ENV = {
    # ===== KEEP THESE - LiveKit MUST use CPU (critical for stability) =====
    'LIVEKIT_PREFER_SOFTWARE_DECODER': '1',
    'LIVEKIT_FORCE_LIBAVCODEC': '1',
    'LIVEKIT_DISABLE_HARDWARE_ACCELERATION': '1',
    'LIVEKIT_DISABLE_GPU': '1',
    'LIVEKIT_DISABLE_HARDWARE_DECODER': '1',
    'LIVEKIT_FORCE_SOFTWARE_DECODER': '1',
    'LIVEKIT_SOFTWARE_ONLY': '1',
    'WEBRTC_FORCE_SOFTWARE_RENDERING': '1',
    'WEBRTC_DISABLE_H264_HARDWARE_DECODER': '1',
    'WEBRTC_FORCE_SOFTWARE_DECODER': '1',
    'WEBRTC_FORCE_SOFTWARE_DECODING': '1',
    
    # ===== KEEP THESE - OpenCV/LibAV use CPU =====
    'OPENCV_DISABLE_CUDA': '1',
    'LIBAVCODEC_FORCE_SOFTWARE': '1',
    'OPENCV_VIDEOIO_PRIORITY_FFMPEG': '0',
    
    # ===== REMOVED - Allow FFmpeg to use GPU =====
    # 'FFMPEG_FORCE_SOFTWARE_CODEC': '1',  # ❌ REMOVED
    # 'HWACCEL': 'none',                   # ❌ REMOVED
    # 'CUDA_VISIBLE_DEVICES': '',          # ❌ REMOVED
    # 'NVIDIA_VISIBLE_DEVICES': 'none',    # ❌ REMOVED
    # 'NVIDIA_DRIVER_CAPABILITIES': '',    # ❌ REMOVED
    # 'FFMPEG_DISABLE_CUDA': '1',          # ❌ REMOVED
    # 'LIBAV_DISABLE_CUDA': '1',           # ❌ REMOVED
    
    # ===== KEEP THESE - General settings =====
    'CUDA_DEVICE_ORDER': 'PCI_BUS_ID',
    'LIVEKIT_LOG_LEVEL': 'error',
    'RUST_LOG': 'error',
}

# Apply environment variables
os.environ.update(CUDA_BLOCK_ENV)

# ===== MODIFIED - Only block CUDA for LiveKit, not FFmpeg =====
try:
    import ctypes.util
    
    _original_find_library = ctypes.util.find_library
    
    def _patched_find_library(name):
        # Only block CUDA for LiveKit-related libraries, not FFmpeg
        if name and any(cuda in str(name).lower() for cuda in 
                       ['nvcuvid', 'cuvid']):  # Only block video decode libs
            return None
        # Allow CUDA for FFmpeg encoding
        return _original_find_library(name)
    
    ctypes.util.find_library = _patched_find_library
    
except Exception as e:
    print(f"Warning: Could not patch ctypes library loading: {e}", file=sys.stderr)

from pathlib import Path
from dotenv import load_dotenv
import os
import pymysql
from celery import Celery
import certifi

os.environ['OPENCV_FFMPEG_CAPTURE_OPTIONS'] = 'hwaccel;none'
os.environ['CUDA_VISIBLE_DEVICES'] = ''
os.environ['OPENCV_VIDEOIO_PRIORITY_FFMPEG'] = '0'
# Fix SSL certificate issues permanently
os.environ['SSL_CERT_FILE'] = certifi.where()
os.environ['REQUESTS_CA_BUNDLE'] = certifi.where()

pymysql.install_as_MySQLdb()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
load_dotenv(os.path.join(BASE_DIR, ".env"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY", "fallback-secret")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DJANGO_DEBUG", "False") == "True"

ALLOWED_HOSTS = os.getenv("DJANGO_ALLOWED_HOSTS", "*").split(",")

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',  # Added if you're using DRF
    'core',  # Add your app here
    'core.scheduler',  # Scheduler app for recurring meetings
    'core.UserDashBoard',
    'django_extensions',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # MUST be first
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# ======== CORS CONFIGURATION - CRITICAL FIX ========
# For development - allow all origins
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True

# Preflight request handling
CORS_PREFLIGHT_MAX_AGE = 86400

# Comprehensive CORS headers
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'access-control-allow-origin',
    'access-control-allow-headers',
    'access-control-allow-methods',
    'access-control-allow-credentials',
    'cache-control',
    'pragma',
    'sec-websocket-key',
    'sec-websocket-version',
    'sec-websocket-protocol',
    'sec-websocket-extensions',
    'upgrade',
    'connection',
]

CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
    'HEAD',
]

# Specific origins for production (when CORS_ALLOW_ALL_ORIGINS is False)
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
    "http://localhost:5174",
    "http://127.0.0.1:5173",
    "http://127.0.0.1:5174",
    "http://192.168.48.201:5173",
    "https://192.168.48.201:5173",
    "https://localhost:5173",
    "https://localhost:8221",
    "https://192.168.48.201:8221",
    "http://192.168.48.25:63038",
    "http://192.168.48.25:53711",
    "http://127.0.0.1:3000",
    "http://192.168.48.27:5173",
    "https://192.168.48.23:8221",
]

# CSRF trusted origins
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:5173",
    "http://localhost:5174",
    "http://127.0.0.1:5173",
    "http://127.0.0.1:5174",
    "http://localhost:3000",
    "http://localhost:8222",
    "http://192.168.48.27:3000",
    "http://192.168.48.27:5173",
    "http://192.168.48.201:5173",
    "https://localhost:8221",
    "https://127.0.0.1:8221",
    "https://192.168.48.23:8221",
    "https://192.168.48.201:5173",
    "https://192.168.48.6:5173",
]

# ======== SESSION SETTINGS - CRITICAL FIXES ========
SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_COOKIE_AGE = 86400  # 24 hours (increased from 10 minutes)
SESSION_SAVE_EVERY_REQUEST = True
SESSION_EXPIRE_AT_BROWSER_CLOSE = False
SESSION_COOKIE_HTTPONLY = False  # Must be False for frontend access
SESSION_COOKIE_SAMESITE = 'Lax'  # Use 'Lax' for cross-origin
SESSION_COOKIE_SECURE = False  # False for development (HTTP)
SESSION_COOKIE_NAME = 'sessionid'

# ======== CSRF SETTINGS - CRITICAL FIXES ========
CSRF_COOKIE_HTTPONLY = False
CSRF_COOKIE_SAMESITE = 'Lax'
CSRF_COOKIE_SECURE = False  # False for development (HTTP)
CSRF_USE_SESSIONS = False
CSRF_COOKIE_NAME = 'csrftoken'
CSRF_FAILURE_VIEW = 'django.views.csrf.csrf_failure'

# Security settings for development
SECURE_SSL_REDIRECT = False  # Keep False for development
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
USE_X_FORWARDED_HOST = True
USE_X_FORWARDED_PORT = True

# Security headers
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_BROWSER_XSS_FILTER = True
SECURE_HSTS_SECONDS = 0  # Disable HSTS for development

ROOT_URLCONF = 'SampleDB.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'SampleDB.wsgi.application'
ASGI_APPLICATION = 'SampleDB.asgi.application'

# Database
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": os.getenv("DB_NAME", "SampleDB"),
        "USER": os.getenv("DB_USER", "sa"),
        "PASSWORD": os.getenv("DB_PASSWORD", "Welcome@123"),
        "HOST": os.getenv("DB_HOST", "127.0.0.1"),
        "PORT": os.getenv("DB_PORT", "3306"),
        "OPTIONS": {
            "init_command": "SET sql_mode='STRICT_TRANS_TABLES'"
        },
    }
}


# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# REST Framework configuration
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
}

# Channels configuration
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer"
    }
}

# ======== CELERY CONFIGURATION FOR RECURRING MEETINGS ========
# Set the default Django settings module for the 'celery' program
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'SampleDB.settings')

# Celery broker configuration
CELERY_BROKER_URL = os.getenv("CELERY_BROKER_URL")
CELERY_RESULT_BACKEND = os.getenv("CELERY_RESULT_BACKEND")
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = os.getenv("CELERY_TIMEZONE", "Asia/Kolkata")
CELERY_ENABLE_UTC = True

# Celery worker configuration
CELERY_TASK_ALWAYS_EAGER = False  # Set to True for testing without Redis
CELERY_TASK_EAGER_PROPAGATES = True
CELERY_WORKER_PREFETCH_MULTIPLIER = 1
CELERY_TASK_ACKS_LATE = True

# Celery Beat scheduler settings for recurring tasks
CELERY_BEAT_SCHEDULE = {
    'update-recurring-meetings': {
        'task': 'core.scheduler.tasks.update_recurring_meetings_task',
        'schedule': 60.0,  # Run every minute to check for new meetings
    },
    'send-daily-invitations': {
        'task': 'core.scheduler.tasks.send_daily_invitations_task',
        'schedule': 60.0 * 60,  # Run every hour to send invitations
    },
    'send-meeting-reminders': {
        'task': 'core.scheduler.tasks.send_meeting_reminders_task',
        'schedule': 60.0,  # Run every minute to check for reminders
    },
    'cleanup-old-meetings': {
        'task': 'core.scheduler.tasks.cleanup_old_meetings_task',
        'schedule': 60.0 * 60 * 24,  # Run daily to cleanup old meetings
    },
}

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'Asia/Kolkata'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# File upload settings
# DATA_UPLOAD_MAX_MEMORY_SIZE = 1024 * 1024 * 1024  # 1GB
# FILE_UPLOAD_MAX_MEMORY_SIZE = 1024 * 1024 * 1024  # 1GB
DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024 * 1024  # 10GB
FILE_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024 * 1024  # 10GB

# Email configuration
EMAIL_HOST = os.getenv("EMAIL_HOST")
EMAIL_PORT = int(os.getenv("EMAIL_PORT", 587))
EMAIL_USE_TLS = os.getenv("EMAIL_USE_TLS", "True") == "True"
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_FROM_EMAIL")

# Enhanced Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {name} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': 'django.log',
            'formatter': 'verbose',
        },
        # Dedicated file for meetings logs
        'meetings_file': {
            'class': 'logging.FileHandler',
            'filename': 'meetings_debug.log',
            'formatter': 'verbose',
        },
        # Dedicated file for scheduler logs
        'scheduler_file': {
            'class': 'logging.FileHandler',
            'filename': 'recurring_meetings.log',
            'formatter': 'verbose',
        },
        # Celery logs
        'celery_file': {
            'class': 'logging.FileHandler',
            'filename': 'celery.log',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django.request': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'django.contrib.sessions': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'corsheaders': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        # Meetings logs - only to file
        'meetings': {
            'handlers': ['meetings_file'],
            'level': 'INFO',
            'propagate': False,
        },
        # Scheduler logs
        'core.scheduler': {
            'handlers': ['scheduler_file', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
        # Celery logs
        'celery': {
            'handlers': ['celery_file', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
        'celery.task': {
            'handlers': ['celery_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'celery.worker': {
            'handlers': ['celery_file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# LiveKit Configuration
LIVEKIT_SETTINGS = {
    'URL': os.getenv("LIVEKIT_URL"),
    'API_KEY': os.getenv("LIVEKIT_API_KEY"),
    'API_SECRET': os.getenv("LIVEKIT_API_SECRET"),
    'TOKEN_TTL': int(os.getenv("LIVEKIT_TOKEN_TTL", 3600)),
    'MAX_PARTICIPANTS': int(os.getenv("LIVEKIT_MAX_PARTICIPANTS", 200)),
    'ROOM_TIMEOUT': int(os.getenv("LIVEKIT_ROOM_TIMEOUT", 300)),
}

# Additional settings for debugging CORS issues
if DEBUG:
    CORS_ORIGIN_ALLOW_ALL = True  # Alternative to CORS_ALLOW_ALL_ORIGINS

APPEND_SLASH = True

# ======== RECURRING MEETINGS SETTINGS ========
# Custom settings for recurring meetings functionality
RECURRING_MEETINGS = {
    'MAX_FUTURE_MEETINGS': 10,  # Maximum number of future meetings to create
    'CLEANUP_DAYS': 30,  # Days after which to cleanup old meetings
    'REMINDER_MINUTES': [60, 30, 10],  # Minutes before meeting to send reminders
    'DEFAULT_DURATION': 60,  # Default meeting duration in minutes
}

# Task queue settings
CELERY_TASK_ROUTES = {
    'core.scheduler.tasks.*': {'queue': 'scheduler'},
    'core.tasks.*': {'queue': 'default'},
}

# Queue configuration
CELERY_TASK_DEFAULT_QUEUE = 'default'
CELERY_TASK_QUEUES = {
    'default': {
        'exchange': 'default',
        'exchange_type': 'direct',
        'routing_key': 'default',
    },
    'scheduler': {
        'exchange': 'scheduler',
        'exchange_type': 'direct',
        'routing_key': 'scheduler',
    },
}